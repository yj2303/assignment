using System.Collections.Generic;

namespace com.assignment2.entities
{
	using Transaction = com.assignment2.transactions.Transaction;


	/// <summary>
	/// Contains all the details of a Trader including Firstname, lastName, FullName,
	/// Wallet Address, phone number, expense, releasedRevenue, unReleasedRevenue,
	/// profit and coinOwnByTheTrader.
	/// </summary>
	public class Trader
	{
		private string firstName;
		private string lastName;
		private string phone;
		private string walletAddress;
		private string fullName = "";
		/// <summary>
		/// Amount of money spent by the trader while purchasing a coin (i.e. price * quantity of the coin bought)
		/// </summary>
		private double? expense = 0.0;
		/// <summary>
		/// Total Money generated by the trader while selling the coin (i.e. price * quantity of the coin bought)
		/// </summary>
		private double? releasedRevenue = 0.0;
		/// <summary>
		/// Total profit that a customer made throughout the transactions.
		/// </summary>
		private double? profit = 0.0;
		/// <summary>
		/// Total money generated by the trader due the coin hold by him/her
		/// (i.e. sum of all the money generated by holding the coins)
		/// </summary>
		private double? unReleasedRevenue = 0.0;
		/// <summary>
		/// HashMap Containing all the coin Own by the Trader on the basis of their symbol.
		/// </summary>
		public Dictionary<string, Coin> coinOwnByTheTrader = new Dictionary<string, Coin>();


		/// <returns> Return String value i.e. FirstName of the Trader. </returns>
		public virtual string FirstName
		{
			get
			{
				return firstName;
			}
			set
			{
				this.firstName = value;
			}
		}


		/// <returns> Return String Value i.e. LastName of the Trader. </returns>
		public virtual string LastName
		{
			get
			{
				return lastName;
			}
			set
			{
				this.lastName = value;
			}
		}


		/// <returns> Returns String value i.e. phone number of the Trader. </returns>
		public virtual string Phone
		{
			get
			{
				return phone;
			}
			set
			{
				this.phone = value;
			}
		}


		/// <returns> Return String value i.e. the wallet Address of the Trader. </returns>
		public virtual string WalletAddress
		{
			get
			{
				return walletAddress;
			}
			set
			{
				this.walletAddress = value;
			}
		}


		/// <returns> Returns String value i.e. the full name of the Trader. </returns>
		public virtual string FullName
		{
			get
			{
				return firstName + " " + lastName;
			}
			set
			{
				this.fullName = value;
			}
		}


		/// <returns> Returns Double value i.e. the Total Expense of the Trader while purchasing the coins. </returns>
		public virtual double? Expense
		{
			get
			{
				return expense;
			}
			set
			{
				this.expense = value;
			}
		}


		/// <returns> Return Double value i.e. the total released Revenue of the trader
		/// while selling the coin own by hm/her. </returns>
		public virtual double? ReleasedRevenue
		{
			get
			{
				return releasedRevenue;
			}
			set
			{
				this.releasedRevenue = value;
			}
		}



		/// <returns> Returns Double value i.e.
		/// total profit= releasedRevenue+ unreleasedRevenue -expense; </returns>
		public virtual double? Profit
		{
			get
			{
				return ReleasedRevenue.Value + UnReleasedRevenue.Value - Expense.Value;
			}
		}

		/// <summary>
		/// Set Profit of a trader
		/// i.e. total profit= releasedRevenue+ unreleasedRevenue -expense;
		/// </summary>
		public virtual void setProfit()
		{
			this.profit = ReleasedRevenue.Value + UnReleasedRevenue.Value - Expense.Value;
		}

		/// <returns> Returns Double value i.e. total money owned by the trader through owning the coins. </returns>
		public virtual double? UnReleasedRevenue
		{
			get
			{
				double val = 0.0;
				foreach (string coinSymbol in coinOwnByTheTrader.Keys)
				{
					val += Transaction.symbolWiseCoinMap[coinSymbol].getPrice() * coinOwnByTheTrader[coinSymbol].Volume;
				}
				this.unReleasedRevenue = val;
				return unReleasedRevenue;
			}
		}

		/// <param name="o"> Trader object which we want to compare current Trader with. </param>
		/// <returns> Returns boolean value true if the Trader have all the properties(like name,wallet Address etc.) similar.
		/// else return false. </returns>
		public override bool Equals(object o)
		{
			if (this == o)
			{
				return true;
			}
			if (!(o is Trader))
			{
				return false;
			}
			Trader trader = (Trader) o;
			return firstName.Equals(trader.firstName) && lastName.Equals(trader.lastName) && phone.Equals(trader.phone) && walletAddress.Equals(trader.walletAddress);
		}

		/// <returns> Return int value generated by the hash function. </returns>
		public override int GetHashCode()
		{
			return Objects.hash(firstName, lastName, phone, walletAddress);
		}

		/// <returns> Returns String value containing all the details of the Trader. </returns>
		public override string ToString()
		{
			return "Trader{" + "firstName='" + firstName + '\'' + ", lastName='" + lastName + '\'' + ", phone='" + phone + '\'' + ", walletAddress='" + walletAddress + '\'' + ", fullName='" + FullName + '\'' + ", expense=" + expense + ", releasedRevenue=" + ReleasedRevenue + ", profit=" + Profit + ", unReleasedRevenue=" + UnReleasedRevenue + ", coinOwnByTheTrader=" + coinOwnByTheTrader + '}';
		}
	}

}